services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    container_name: app
    command: pnpm run start:debug
    depends_on:
      - db
    env_file:
      - .env
    ports:
      - ${PORT}:${PORT}
      - 9229:9229
    volumes:
      - /usr/src/app/node_modules
      - .:/usr/src/app
    restart: always

  db:
    image: postgres
    container_name: clipped-postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always

  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb-local
    ports:
      - '8001:8000'
    command: '-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal'
    volumes:
      - dynamodb-data:/home/dynamodblocal
    working_dir: /home/dynamodblocal

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: always

volumes:
  pgdata:
  dynamodb-data:
  prometheus_data:
  grafana_data:
